function [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% Returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: A table containing the same predictor and response
%       columns as those imported into the app.
%
%  Output:
%      trainedClassifier: A struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: A function to make predictions on new
%       data.
%
%      validationAccuracy: A double containing the accuracy as a
%       percentage. In the app, the Models pane displays this overall
%       accuracy score for each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 26-Mar-2023 19:16:53


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
% Split matrices in the input table into vectors
inputTable.RegionsNum_1 = inputTable.RegionsNum(:,1);
inputTable.RegionsNum_2 = inputTable.RegionsNum(:,2);
inputTable.RegionsNum_3 = inputTable.RegionsNum(:,3);
inputTable.RegionsNum_4 = inputTable.RegionsNum(:,4);

predictorNames = {'RegionsNum_1', 'RegionsNum_2', 'RegionsNum_3', 'RegionsNum_4', 'mean_pcg', 'std_pcg', 'rms_pcg', 'zc_pcg', 'energy_pcg', 'median_pcg', 'absolute_pcg', 'iqr_pcg', 'maxfreq', 'maxval', 'maxratio', 'MFCC1', 'MFCC2', 'MFCC3', 'MFCC4', 'MFCC5', 'MFCC6', 'MFCC7', 'MFCC8', 'MFCC9', 'MFCC10', 'MFCC11', 'MFCC12', 'MFCC13', 'shannon_energy', 'dominant_freq', 'skewness_pcg', 'kurtosis_pcg', 'entropy_pcg', 'spectral_entropy_pcg', 'energy_C1', 'energy_entropy_C1', 'energy_C2', 'energy_entropy_C2', 'energy_C3', 'energy_entropy_C3', 'energy_C4', 'energy_entropy_C4', 'energy_C5', 'energy_entropy_C5', 'dominant_freq_C1', 'dominant_freq_C2', 'dominant_freq_C3', 'dominant_freq_C4', 'dominant_freq_C5'};
predictors = inputTable(:, predictorNames);
response = inputTable.Anomalies;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
template = templateTree(...
    'MaxNumSplits', 20, ...
    'NumVariablesToSample', 'all');
classificationEnsemble = fitcensemble(...
    predictors, ...
    response, ...
    'Method', 'AdaBoostM1', ...
    'NumLearningCycles', 30, ...
    'Learners', template, ...
    'LearnRate', 0.1, ...
    'ClassNames', categorical({'abnormal'; 'normal'}));

% Create the result struct with predict function
splitMatricesInTableFcn = @(t) [t(:,setdiff(t.Properties.VariableNames, {'RegionsNum'})), array2table(table2array(t(:,{'RegionsNum'})), 'VariableNames', {'RegionsNum_1', 'RegionsNum_2', 'RegionsNum_3', 'RegionsNum_4'})];
extractPredictorsFromTableFcn = @(t) t(:, predictorNames);
predictorExtractionFcn = @(x) extractPredictorsFromTableFcn(splitMatricesInTableFcn(x));
ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
trainedClassifier.predictFcn = @(x) ensemblePredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'MFCC1', 'MFCC10', 'MFCC11', 'MFCC12', 'MFCC13', 'MFCC2', 'MFCC3', 'MFCC4', 'MFCC5', 'MFCC6', 'MFCC7', 'MFCC8', 'MFCC9', 'absolute_pcg', 'dominant_freq', 'dominant_freq_C1', 'dominant_freq_C2', 'dominant_freq_C3', 'dominant_freq_C4', 'dominant_freq_C5', 'energy_C1', 'energy_C2', 'energy_C3', 'energy_C4', 'energy_C5', 'energy_entropy_C1', 'energy_entropy_C2', 'energy_entropy_C3', 'energy_entropy_C4', 'energy_entropy_C5', 'energy_pcg', 'entropy_pcg', 'iqr_pcg', 'kurtosis_pcg', 'maxfreq', 'maxratio', 'maxval', 'mean_pcg', 'median_pcg', 'rms_pcg', 'shannon_energy', 'skewness_pcg', 'spectral_entropy_pcg', 'std_pcg', 'zc_pcg', 'RegionsNum'};
trainedClassifier.ClassificationEnsemble = classificationEnsemble;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2022b.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
% Split matrices in the input table into vectors
inputTable.RegionsNum_1 = inputTable.RegionsNum(:,1);
inputTable.RegionsNum_2 = inputTable.RegionsNum(:,2);
inputTable.RegionsNum_3 = inputTable.RegionsNum(:,3);
inputTable.RegionsNum_4 = inputTable.RegionsNum(:,4);

predictorNames = {'RegionsNum_1', 'RegionsNum_2', 'RegionsNum_3', 'RegionsNum_4', 'mean_pcg', 'std_pcg', 'rms_pcg', 'zc_pcg', 'energy_pcg', 'median_pcg', 'absolute_pcg', 'iqr_pcg', 'maxfreq', 'maxval', 'maxratio', 'MFCC1', 'MFCC2', 'MFCC3', 'MFCC4', 'MFCC5', 'MFCC6', 'MFCC7', 'MFCC8', 'MFCC9', 'MFCC10', 'MFCC11', 'MFCC12', 'MFCC13', 'shannon_energy', 'dominant_freq', 'skewness_pcg', 'kurtosis_pcg', 'entropy_pcg', 'spectral_entropy_pcg', 'energy_C1', 'energy_entropy_C1', 'energy_C2', 'energy_entropy_C2', 'energy_C3', 'energy_entropy_C3', 'energy_C4', 'energy_entropy_C4', 'energy_C5', 'energy_entropy_C5', 'dominant_freq_C1', 'dominant_freq_C2', 'dominant_freq_C3', 'dominant_freq_C4', 'dominant_freq_C5'};
predictors = inputTable(:, predictorNames);
response = inputTable.Anomalies;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationEnsemble, 'KFold', 10);

% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
